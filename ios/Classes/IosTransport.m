// Autogenerated from Pigeon (v1.0.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "IosTransport.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface DataSource ()
+ (DataSource *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface Version ()
+ (Version *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface Property ()
+ (Property *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IosAppInfo ()
+ (IosAppInfo *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IosTransportHandle ()
+ (IosTransportHandle *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IosTransportResult ()
+ (IosTransportResult *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation DataSource
+ (DataSource *)fromMap:(NSDictionary *)dict {
  DataSource *result = [[DataSource alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.status = dict[@"status"];
  if ((NSNull *)result.status == [NSNull null]) {
    result.status = nil;
  }
  result.flags = dict[@"flags"];
  if ((NSNull *)result.flags == [NSNull null]) {
    result.flags = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", (self.name ? self.name : [NSNull null]), @"name", (self.status ? self.status : [NSNull null]), @"status", (self.flags ? self.flags : [NSNull null]), @"flags", nil];
}
@end

@implementation Version
+ (Version *)fromMap:(NSDictionary *)dict {
  Version *result = [[Version alloc] init];
  result.major = dict[@"major"];
  if ((NSNull *)result.major == [NSNull null]) {
    result.major = nil;
  }
  result.middle = dict[@"middle"];
  if ((NSNull *)result.middle == [NSNull null]) {
    result.middle = nil;
  }
  result.minor = dict[@"minor"];
  if ((NSNull *)result.minor == [NSNull null]) {
    result.minor = nil;
  }
  result.build = dict[@"build"];
  if ((NSNull *)result.build == [NSNull null]) {
    result.build = nil;
  }
  result.year = dict[@"year"];
  if ((NSNull *)result.year == [NSNull null]) {
    result.year = nil;
  }
  result.month = dict[@"month"];
  if ((NSNull *)result.month == [NSNull null]) {
    result.month = nil;
  }
  result.day = dict[@"day"];
  if ((NSNull *)result.day == [NSNull null]) {
    result.day = nil;
  }
  result.hour = dict[@"hour"];
  if ((NSNull *)result.hour == [NSNull null]) {
    result.hour = nil;
  }
  result.minute = dict[@"minute"];
  if ((NSNull *)result.minute == [NSNull null]) {
    result.minute = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.major ? self.major : [NSNull null]), @"major", (self.middle ? self.middle : [NSNull null]), @"middle", (self.minor ? self.minor : [NSNull null]), @"minor", (self.build ? self.build : [NSNull null]), @"build", (self.year ? self.year : [NSNull null]), @"year", (self.month ? self.month : [NSNull null]), @"month", (self.day ? self.day : [NSNull null]), @"day", (self.hour ? self.hour : [NSNull null]), @"hour", (self.minute ? self.minute : [NSNull null]), @"minute", nil];
}
@end

@implementation Property
+ (Property *)fromMap:(NSDictionary *)dict {
  Property *result = [[Property alloc] init];
  result.id = dict[@"id"];
  if ((NSNull *)result.id == [NSNull null]) {
    result.id = nil;
  }
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.stringValue = dict[@"stringValue"];
  if ((NSNull *)result.stringValue == [NSNull null]) {
    result.stringValue = nil;
  }
  result.longValue = dict[@"longValue"];
  if ((NSNull *)result.longValue == [NSNull null]) {
    result.longValue = nil;
  }
  result.arrayValue = dict[@"arrayValue"];
  if ((NSNull *)result.arrayValue == [NSNull null]) {
    result.arrayValue = nil;
  }
  result.byteValue = dict[@"byteValue"];
  if ((NSNull *)result.byteValue == [NSNull null]) {
    result.byteValue = nil;
  }
  result.dataSourceValue = [DataSource fromMap:dict[@"dataSourceValue"]];
  if ((NSNull *)result.dataSourceValue == [NSNull null]) {
    result.dataSourceValue = nil;
  }
  result.versionValue = [Version fromMap:dict[@"versionValue"]];
  if ((NSNull *)result.versionValue == [NSNull null]) {
    result.versionValue = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.id ? self.id : [NSNull null]), @"id", (self.type ? self.type : [NSNull null]), @"type", (self.stringValue ? self.stringValue : [NSNull null]), @"stringValue", (self.longValue ? self.longValue : [NSNull null]), @"longValue", (self.arrayValue ? self.arrayValue : [NSNull null]), @"arrayValue", (self.byteValue ? self.byteValue : [NSNull null]), @"byteValue", (self.dataSourceValue ? [self.dataSourceValue toMap] : [NSNull null]), @"dataSourceValue", (self.versionValue ? [self.versionValue toMap] : [NSNull null]), @"versionValue", nil];
}
@end

@implementation IosAppInfo
+ (IosAppInfo *)fromMap:(NSDictionary *)dict {
  IosAppInfo *result = [[IosAppInfo alloc] init];
  result.appId = dict[@"appId"];
  if ((NSNull *)result.appId == [NSNull null]) {
    result.appId = nil;
  }
  result.developerId = dict[@"developerId"];
  if ((NSNull *)result.developerId == [NSNull null]) {
    result.developerId = nil;
  }
  result.appKey = dict[@"appKey"];
  if ((NSNull *)result.appKey == [NSNull null]) {
    result.appKey = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.appId ? self.appId : [NSNull null]), @"appId", (self.developerId ? self.developerId : [NSNull null]), @"developerId", (self.appKey ? self.appKey : [NSNull null]), @"appKey", nil];
}
@end

@implementation IosTransportHandle
+ (IosTransportHandle *)fromMap:(NSDictionary *)dict {
  IosTransportHandle *result = [[IosTransportHandle alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@implementation IosTransportResult
+ (IosTransportResult *)fromMap:(NSDictionary *)dict {
  IosTransportResult *result = [[IosTransportResult alloc] init];
  result.value = dict[@"value"];
  if ((NSNull *)result.value == [NSNull null]) {
    result.value = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.value ? self.value : [NSNull null]), @"value", nil];
}
@end

@interface IosTransportCodecReader : FlutterStandardReader
@end
@implementation IosTransportCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [DataSource fromMap:[self readValue]];
    
    case 129:     
      return [IosAppInfo fromMap:[self readValue]];
    
    case 130:     
      return [IosTransportHandle fromMap:[self readValue]];
    
    case 131:     
      return [IosTransportResult fromMap:[self readValue]];
    
    case 132:     
      return [Property fromMap:[self readValue]];
    
    case 133:     
      return [Version fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface IosTransportCodecWriter : FlutterStandardWriter
@end
@implementation IosTransportCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[DataSource class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IosAppInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IosTransportHandle class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IosTransportResult class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[Property class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[Version class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface IosTransportCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation IosTransportCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[IosTransportCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[IosTransportCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *IosTransportGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    IosTransportCodecReaderWriter *readerWriter = [[IosTransportCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void IosTransportSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<IosTransport> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IosTransport.openClient"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openClientAppInfo:completion:)], @"IosTransport api (%@) doesn't respond to @selector(openClientAppInfo:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosAppInfo *arg_appInfo = args[0];
        [api openClientAppInfo:arg_appInfo completion:^(IosTransportHandle *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IosTransport.openDevice"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openDeviceHandle:guid:completion:)], @"IosTransport api (%@) doesn't respond to @selector(openDeviceHandle:guid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = args[0];
        NSString *arg_guid = args[1];
        [api openDeviceHandle:arg_handle guid:arg_guid completion:^(IosTransportHandle *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IosTransport.close"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(closeHandle:completion:)], @"IosTransport api (%@) doesn't respond to @selector(closeHandle:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = args[0];
        [api closeHandle:arg_handle completion:^(IosTransportResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IosTransport.getProperty"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPropertyHandle:property:completion:)], @"IosTransport api (%@) doesn't respond to @selector(getPropertyHandle:property:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = args[0];
        Property *arg_property = args[1];
        [api getPropertyHandle:arg_handle property:arg_property completion:^(Property *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.IosTransport.setProperty"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPropertyHandle:property:completion:)], @"IosTransport api (%@) doesn't respond to @selector(setPropertyHandle:property:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = args[0];
        Property *arg_property = args[1];
        [api setPropertyHandle:arg_handle property:arg_property completion:^(Property *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
