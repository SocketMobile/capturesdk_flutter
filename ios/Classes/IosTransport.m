// Autogenerated from Pigeon (v9.2.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "IosTransport.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface DataSource ()
+ (DataSource *)fromList:(NSArray *)list;
+ (nullable DataSource *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Version ()
+ (Version *)fromList:(NSArray *)list;
+ (nullable Version *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface Property ()
+ (Property *)fromList:(NSArray *)list;
+ (nullable Property *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface IosAppInfo ()
+ (IosAppInfo *)fromList:(NSArray *)list;
+ (nullable IosAppInfo *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface IosTransportHandle ()
+ (IosTransportHandle *)fromList:(NSArray *)list;
+ (nullable IosTransportHandle *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface IosTransportResult ()
+ (IosTransportResult *)fromList:(NSArray *)list;
+ (nullable IosTransportResult *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation DataSource
+ (instancetype)makeWithId:(nullable NSNumber *)id
    name:(nullable NSString *)name
    status:(nullable NSNumber *)status
    flags:(nullable NSNumber *)flags {
  DataSource* pigeonResult = [[DataSource alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.status = status;
  pigeonResult.flags = flags;
  return pigeonResult;
}
+ (DataSource *)fromList:(NSArray *)list {
  DataSource *pigeonResult = [[DataSource alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.status = GetNullableObjectAtIndex(list, 2);
  pigeonResult.flags = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable DataSource *)nullableFromList:(NSArray *)list {
  return (list) ? [DataSource fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.status ?: [NSNull null]),
    (self.flags ?: [NSNull null]),
  ];
}
@end

@implementation Version
+ (instancetype)makeWithMajor:(nullable NSNumber *)major
    middle:(nullable NSNumber *)middle
    minor:(nullable NSNumber *)minor
    build:(nullable NSNumber *)build
    year:(nullable NSNumber *)year
    month:(nullable NSNumber *)month
    day:(nullable NSNumber *)day
    hour:(nullable NSNumber *)hour
    minute:(nullable NSNumber *)minute {
  Version* pigeonResult = [[Version alloc] init];
  pigeonResult.major = major;
  pigeonResult.middle = middle;
  pigeonResult.minor = minor;
  pigeonResult.build = build;
  pigeonResult.year = year;
  pigeonResult.month = month;
  pigeonResult.day = day;
  pigeonResult.hour = hour;
  pigeonResult.minute = minute;
  return pigeonResult;
}
+ (Version *)fromList:(NSArray *)list {
  Version *pigeonResult = [[Version alloc] init];
  pigeonResult.major = GetNullableObjectAtIndex(list, 0);
  pigeonResult.middle = GetNullableObjectAtIndex(list, 1);
  pigeonResult.minor = GetNullableObjectAtIndex(list, 2);
  pigeonResult.build = GetNullableObjectAtIndex(list, 3);
  pigeonResult.year = GetNullableObjectAtIndex(list, 4);
  pigeonResult.month = GetNullableObjectAtIndex(list, 5);
  pigeonResult.day = GetNullableObjectAtIndex(list, 6);
  pigeonResult.hour = GetNullableObjectAtIndex(list, 7);
  pigeonResult.minute = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable Version *)nullableFromList:(NSArray *)list {
  return (list) ? [Version fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.major ?: [NSNull null]),
    (self.middle ?: [NSNull null]),
    (self.minor ?: [NSNull null]),
    (self.build ?: [NSNull null]),
    (self.year ?: [NSNull null]),
    (self.month ?: [NSNull null]),
    (self.day ?: [NSNull null]),
    (self.hour ?: [NSNull null]),
    (self.minute ?: [NSNull null]),
  ];
}
@end

@implementation Property
+ (instancetype)makeWithId:(nullable NSNumber *)id
    type:(nullable NSNumber *)type
    stringValue:(nullable NSString *)stringValue
    longValue:(nullable NSNumber *)longValue
    arrayValue:(nullable FlutterStandardTypedData *)arrayValue
    byteValue:(nullable NSNumber *)byteValue
    dataSourceValue:(nullable DataSource *)dataSourceValue
    versionValue:(nullable Version *)versionValue
    objectValue:(id )objectValue {
  Property* pigeonResult = [[Property alloc] init];
  pigeonResult.id = id;
  pigeonResult.type = type;
  pigeonResult.stringValue = stringValue;
  pigeonResult.longValue = longValue;
  pigeonResult.arrayValue = arrayValue;
  pigeonResult.byteValue = byteValue;
  pigeonResult.dataSourceValue = dataSourceValue;
  pigeonResult.versionValue = versionValue;
  pigeonResult.objectValue = objectValue;
  return pigeonResult;
}
+ (Property *)fromList:(NSArray *)list {
  Property *pigeonResult = [[Property alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.type = GetNullableObjectAtIndex(list, 1);
  pigeonResult.stringValue = GetNullableObjectAtIndex(list, 2);
  pigeonResult.longValue = GetNullableObjectAtIndex(list, 3);
  pigeonResult.arrayValue = GetNullableObjectAtIndex(list, 4);
  pigeonResult.byteValue = GetNullableObjectAtIndex(list, 5);
  pigeonResult.dataSourceValue = [DataSource nullableFromList:(GetNullableObjectAtIndex(list, 6))];
  pigeonResult.versionValue = [Version nullableFromList:(GetNullableObjectAtIndex(list, 7))];
  pigeonResult.objectValue = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable Property *)nullableFromList:(NSArray *)list {
  return (list) ? [Property fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.type ?: [NSNull null]),
    (self.stringValue ?: [NSNull null]),
    (self.longValue ?: [NSNull null]),
    (self.arrayValue ?: [NSNull null]),
    (self.byteValue ?: [NSNull null]),
    (self.dataSourceValue ? [self.dataSourceValue toList] : [NSNull null]),
    (self.versionValue ? [self.versionValue toList] : [NSNull null]),
    (self.objectValue ?: [NSNull null]),
  ];
}
@end

@implementation IosAppInfo
+ (instancetype)makeWithAppId:(nullable NSString *)appId
    developerId:(nullable NSString *)developerId
    appKey:(nullable NSString *)appKey {
  IosAppInfo* pigeonResult = [[IosAppInfo alloc] init];
  pigeonResult.appId = appId;
  pigeonResult.developerId = developerId;
  pigeonResult.appKey = appKey;
  return pigeonResult;
}
+ (IosAppInfo *)fromList:(NSArray *)list {
  IosAppInfo *pigeonResult = [[IosAppInfo alloc] init];
  pigeonResult.appId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.developerId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.appKey = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable IosAppInfo *)nullableFromList:(NSArray *)list {
  return (list) ? [IosAppInfo fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.appId ?: [NSNull null]),
    (self.developerId ?: [NSNull null]),
    (self.appKey ?: [NSNull null]),
  ];
}
@end

@implementation IosTransportHandle
+ (instancetype)makeWithValue:(nullable NSNumber *)value {
  IosTransportHandle* pigeonResult = [[IosTransportHandle alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (IosTransportHandle *)fromList:(NSArray *)list {
  IosTransportHandle *pigeonResult = [[IosTransportHandle alloc] init];
  pigeonResult.value = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable IosTransportHandle *)nullableFromList:(NSArray *)list {
  return (list) ? [IosTransportHandle fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.value ?: [NSNull null]),
  ];
}
@end

@implementation IosTransportResult
+ (instancetype)makeWithValue:(nullable NSNumber *)value {
  IosTransportResult* pigeonResult = [[IosTransportResult alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (IosTransportResult *)fromList:(NSArray *)list {
  IosTransportResult *pigeonResult = [[IosTransportResult alloc] init];
  pigeonResult.value = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable IosTransportResult *)nullableFromList:(NSArray *)list {
  return (list) ? [IosTransportResult fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.value ?: [NSNull null]),
  ];
}
@end

@interface IosTransportCodecReader : FlutterStandardReader
@end
@implementation IosTransportCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [DataSource fromList:[self readValue]];
    case 129: 
      return [IosAppInfo fromList:[self readValue]];
    case 130: 
      return [IosTransportHandle fromList:[self readValue]];
    case 131: 
      return [IosTransportResult fromList:[self readValue]];
    case 132: 
      return [Property fromList:[self readValue]];
    case 133: 
      return [Version fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface IosTransportCodecWriter : FlutterStandardWriter
@end
@implementation IosTransportCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[DataSource class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[IosAppInfo class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[IosTransportHandle class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[IosTransportResult class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Property class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[Version class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface IosTransportCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation IosTransportCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[IosTransportCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[IosTransportCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *IosTransportGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    IosTransportCodecReaderWriter *readerWriter = [[IosTransportCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void IosTransportSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<IosTransport> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.IosTransport.openClient"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openClientAppInfo:completion:)], @"IosTransport api (%@) doesn't respond to @selector(openClientAppInfo:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosAppInfo *arg_appInfo = GetNullableObjectAtIndex(args, 0);
        [api openClientAppInfo:arg_appInfo completion:^(IosTransportHandle *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.IosTransport.openDevice"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(openDeviceHandle:guid:completion:)], @"IosTransport api (%@) doesn't respond to @selector(openDeviceHandle:guid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = GetNullableObjectAtIndex(args, 0);
        NSString *arg_guid = GetNullableObjectAtIndex(args, 1);
        [api openDeviceHandle:arg_handle guid:arg_guid completion:^(IosTransportHandle *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.IosTransport.close"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(closeHandle:completion:)], @"IosTransport api (%@) doesn't respond to @selector(closeHandle:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = GetNullableObjectAtIndex(args, 0);
        [api closeHandle:arg_handle completion:^(IosTransportResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.IosTransport.getProperty"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPropertyHandle:property:completion:)], @"IosTransport api (%@) doesn't respond to @selector(getPropertyHandle:property:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = GetNullableObjectAtIndex(args, 0);
        Property *arg_property = GetNullableObjectAtIndex(args, 1);
        [api getPropertyHandle:arg_handle property:arg_property completion:^(Property *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.IosTransport.setProperty"
        binaryMessenger:binaryMessenger
        codec:IosTransportGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPropertyHandle:property:completion:)], @"IosTransport api (%@) doesn't respond to @selector(setPropertyHandle:property:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IosTransportHandle *arg_handle = GetNullableObjectAtIndex(args, 0);
        Property *arg_property = GetNullableObjectAtIndex(args, 1);
        [api setPropertyHandle:arg_handle property:arg_property completion:^(Property *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
